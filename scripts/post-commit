#!/bin/sh
# To enable this hook, move this file to ".git/hooks/post-commit"

set -eu

# utility function to display message in color (if supported)
highlight() {
  tput -S << EOF
bold
setaf $1
EOF
  echo "$2"
  tput sgr0
}

# gather commit information
commit="$(git rev-parse HEAD)"
short_commit="$(git rev-parse --short "$commit")"
git_dir="$(git rev-parse --git-dir)"
orig_dir="$(git rev-parse --show-toplevel)"

# create a temporary working directory
workspace="$(mktemp -d)"
src_dir="$workspace"
build_dir="$workspace/build"
echo "Created workspace: $workspace"

# setup cleanup
ok=0
on_exit() {
  if [ $ok -ne 1 ]; then
    highlight 1 'post-commit hook failed!'
  fi
  echo "Removing workspace: $workspace"
  rm -rf -- "$workspace/.git"
  rm -r -- "$workspace"
}
trap on_exit EXIT

# build the project
echo "Checking commit: $short_commit"
git clone --quiet --single-branch -- "$git_dir" "$src_dir"
cd -- "$workspace"
files_changed=$(git diff-tree --no-commit-id --name-only -r HEAD)
scripts/reformat-files "$files_changed"
if ! git diff --quiet; then
  echo -n 'Format check failed. '
  while true; do
    read -p 'Apply auto-reformat? [Y/n] ' -r REPLY
    case "$REPLY" in
      y|Y|'') break ;;
      n|N ) exit ;;
      *) >&2 echo "Choice must be 'y' or 'n'" ;;
    esac
  done
  git add --update
  git commit --verbose
  new_commit="$(git rev-parse HEAD)"
  cd -- "$orig_dir"
  git fetch --quiet "$src_dir"
  git reset --merge "$new_commit"
fi
ok=1
